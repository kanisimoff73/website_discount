from bs4 import BeautifulSoup
from os import listdir
from os.path import isfile, join
from django.core.management.base import BaseCommand
from ...models import *
from website.settings import BASE_DIR
from django.core.management import call_command
from django.apps import apps
import psycopg2
from transliterate import translit, get_available_language_codes
from os.path import exists
from unidecode import unidecode


class Command(BaseCommand):

    def handle(self, *args, **options):
        """
        Удаление созданных нами таблиц и обратное их добавление,
        что бы id(pk) всегда формировался с 1, с последующим наполнением таблиц данными
        """

        sql_migrate_0001 = '''
        BEGIN;
        --
        -- Create model Categories
        --
        CREATE TABLE "main_app_categories" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "name" varchar(20) NOT NULL, "slug" varchar(200) NOT NULL UNIQUE);
        --
        -- Create model Shops
        --
        CREATE TABLE "main_app_shops" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "name" varchar(20) NOT NULL, "slug" varchar(200) NOT NULL UNIQUE);
        --
        -- Create model Products
        --
        CREATE TABLE "main_app_products" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "name" text NOT NULL, "photo" text NOT NULL, "previous_price" double precision NOT NULL, "link" text NULL, "cat_id" bigint NOT NULL, "shop_id" bigint NOT NULL);
        CREATE INDEX "main_app_categories_name_9d1b12d2" ON "main_app_categories" ("name");
        CREATE INDEX "main_app_categories_name_9d1b12d2_like" ON "main_app_categories" ("name" varchar_pattern_ops);
        CREATE INDEX "main_app_categories_slug_201a0723_like" ON "main_app_categories" ("slug" varchar_pattern_ops);
        CREATE INDEX "main_app_shops_name_69b05fd9" ON "main_app_shops" ("name");
        CREATE INDEX "main_app_shops_name_69b05fd9_like" ON "main_app_shops" ("name" varchar_pattern_ops);
        CREATE INDEX "main_app_shops_slug_dfa368a5_like" ON "main_app_shops" ("slug" varchar_pattern_ops);
        ALTER TABLE "main_app_products" ADD CONSTRAINT "main_app_products_cat_id_ac3d1de4_fk_main_app_categories_id" FOREIGN KEY ("cat_id") REFERENCES "main_app_categories" ("id") DEFERRABLE INITIALLY DEFERRED;
        ALTER TABLE "main_app_products" ADD CONSTRAINT "main_app_products_shop_id_5ffd4812_fk_main_app_shops_id" FOREIGN KEY ("shop_id") REFERENCES "main_app_shops" ("id") DEFERRABLE INITIALLY DEFERRED;
        CREATE INDEX "main_app_products_name_513522dc" ON "main_app_products" ("name");
        CREATE INDEX "main_app_products_name_513522dc_like" ON "main_app_products" ("name" text_pattern_ops);
        CREATE INDEX "main_app_products_cat_id_ac3d1de4" ON "main_app_products" ("cat_id");
        CREATE INDEX "main_app_products_shop_id_5ffd4812" ON "main_app_products" ("shop_id");
        COMMIT;
        '''

        conn = psycopg2.connect(dbname='discount_db', user='user_website',
                                password='postgresql', host='localhost', port="5432")
        cursor = conn.cursor()

        removed_tables = []
        exceptions = []
        for model in apps.get_models():
            if model.__name__ in ('Shops', 'Categories', 'Products'):
                try:
                    model.objects.all().delete()
                    cursor.execute(f'DROP TABLE IF EXISTS {model._meta.db_table} CASCADE')
                    conn.commit()
                    print(f"Dropped table {model._meta.db_table} from model {model.__name__}")
                except Exception as e:
                    exceptions.append([model._meta.db_table, str(e)])
                    print(e)
                    continue
                removed_tables.append(model._meta.db_table)
        print(f"Removed {len(removed_tables)} tables")
        cursor.execute(sql_migrate_0001)
        conn.close()

        data_dir = join(BASE_DIR, 'main_app\static\main_app\data')
        shops_id = {}
        categories_id = {}
        shop_id = 1
        cat_id = 1
        for shop_name in listdir(data_dir):
            for cat in listdir(join(data_dir, shop_name)):
                onlyfiles = [f for f in listdir(join(data_dir, shop_name, cat)) if
                             isfile(join(data_dir, shop_name, cat, f))]
                if onlyfiles:
                    if shop_name not in shops_id:
                        Shops.objects.create(name=shop_name, slug=shop_name)  # создаем магазин если его ещё нет
                        shops_id[shop_name] = shop_id
                        shop_id += 1
                    if cat not in categories_id:
                        categories_id[cat] = cat_id
                        cat_id += 1
                        cat_slug = translit(cat, 'ru', reversed=True).lower()
                        rep = [',', ' ', '-', "\'"]
                        for symbol in rep:
                            if symbol in cat_slug:
                                cat_slug = cat_slug.replace(symbol, '')
                        Categories.objects.create(name=cat, slug=cat_slug)  # создаем категорию если её еще нет
                    cat_id_ = categories_id[cat]
                    shop = shops_id[shop_name]
                for file_name in onlyfiles:
                    path_to_file = join(data_dir, shop_name, cat, file_name)
                    with open(path_to_file, encoding='utf-8') as file:
                        src = file.read()
                    soup = BeautifulSoup(src, 'lxml')
                    print(path_to_file)

                    if shop_name == 'DNS-shop':
                        all_products_data = soup.find_all(class_='catalog-product')
                        for item in all_products_data:
                            name = item.find(class_='catalog-product__name').text[:-1]
                            photo = item.find('picture').find('img').get('src')[2:]
                            if photo:
                                path_to_photo = join(data_dir, shop_name, cat, photo)
                                if not exists(path_to_photo):
                                    path_to_photo = 'путь не найден'
                            else:
                                path_to_photo = 'путь не найден'
                            previous_price = int(
                                item.find_next(class_='product-buy__price_active').next_element[:-1].rstrip().replace(
                                    ' ', ''))
                            link = item.find(class_='catalog-product__name').get('href')
                            Products.objects.create(
                                name=name,
                                photo=path_to_photo,
                                previous_price=previous_price,
                                link=link,
                                cat_id=cat_id_,
                                shop_id=shop,
                            )

                    if shop_name == 'Mvideo':
                        rows = True
                        all_products_data = soup.find_all('div', {'class': 'product-cards-row'})
                        if not all_products_data:
                            all_products_data = soup.find_all('div', {'class': 'product-cards-layout__item'})
                            rows = False
                        for item in all_products_data:
                            if rows:
                                products_rows = item.find_all(class_='product-title__text')
                                for row in products_rows:
                                    name = row.text
                                    photo = row.find_previous('img').get('src')[2:]
                                    if photo:
                                        path_to_photo = join(data_dir, shop_name, cat, photo)
                                        if not exists(path_to_photo):
                                            path_to_photo = 'путь не найден'
                                    else:
                                        path_to_photo = 'путь не найден'
                                    price = int(''.join(map(str, list(
                                        i for i in (unidecode(row.find_next(class_='price__main-value').text)) if
                                        i.isdigit()))))
                                    link = row.get('href')
                                    Products.objects.create(
                                        name=name,
                                        photo=path_to_photo,
                                        previous_price=previous_price,
                                        link=link,
                                        cat_id=cat_id_,
                                        shop_id=shop,
                                    )
                            else:
                                name = item.find(class_='product-title__text').text
                                photo = item.find('picture').find('img').get('src')[2:]
                                if photo:
                                    path_to_photo = join(data_dir, shop_name, cat, photo)
                                    if not exists(path_to_photo):
                                        path_to_photo = 'путь не найден'
                                else:
                                    path_to_photo = 'путь не найден'
                                price = item.find('span', {'class': 'price__main-value'})
                                if price:
                                    price = int(
                                        ''.join(map(str, list(i for i in (unidecode(price.text)) if i.isdigit()))))
                                else:
                                    price = 'Нет в наличии'
                                link = item.find(class_='product-title__text').get('href')
                                Products.objects.create(
                                    name=name,
                                    photo=path_to_photo,
                                    previous_price=previous_price,
                                    link=link,
                                    cat_id=cat_id_,
                                    shop_id=shop,
                                )

                    if shop_name == 'Eldarado':
                        all_products_data = soup.find("div", id="listing-container").find("ul", class_="Yk").find_all(
                            "li", class_="kD")
                        for item in all_products_data:
                            name = item.find("a", class_="tD").text
                            photo = item.find("a", class_="Bm").next_element.get("src")[2:]
                            if photo:
                                path_to_photo = join(data_dir, shop_name, cat, photo)
                                if not exists(path_to_photo):
                                    path_to_photo = 'путь не найден'
                            else:
                                path_to_photo = 'путь не найден'
                            previous_price = int("".join(
                                map(str, list(i for i in (unidecode(item.find("div", class_="undefined UG WG Ux Wx").
                                                                    find("span").text)) if i.isdigit()))))  # в телевизорах нет класса "undefined UG WG Ux Wx" в последних 4х продуктах, надо завтра исправить
                            link = item.find("div", class_="lD nD").find("a").get("href")
                            Products.objects.create(
                                name=name,
                                photo=path_to_photo,
                                previous_price=previous_price,
                                link=link,
                                cat_id=cat_id_,
                                shop_id=shop,
                            )


                    # if shop_name == 'Citilink':
