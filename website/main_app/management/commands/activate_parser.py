from bs4 import BeautifulSoup
from os import listdir
from os.path import isfile, join
from django.core.management.base import BaseCommand
from ...models import *
from website.settings import BASE_DIR
from django.core.management import call_command
from django.apps import apps
import psycopg2


class Command(BaseCommand):

    def handle(self, *args, **options):
        """
        Удаление созданных нами таблиц и обратное их добавление,
        что бы id(pk) всегда формировался с 1, с последующим наполнением таблиц данными
        """

        # sql_migrate_0001 = '''BEGIN;
        # --
        # -- Create model Categories
        # --
        # CREATE TABLE "main_app_categories" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "name" varchar(20) NOT NULL, "slug" varchar(200) NOT NULL UNIQUE);
        # --
        # -- Create model Shops
        # --
        # CREATE TABLE "main_app_shops" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "name" varchar(20) NOT NULL);
        # --
        # -- Create model Products
        # --
        # CREATE TABLE "main_app_products" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "name" varchar(20) NOT NULL, "photo" varchar(100) NOT NULL, "shop_name" varchar(20) NOT NULL, "previous_price" double precision
        #  NOT NULL, "cat_id" bigint NOT NULL, "shop_id" bigint NOT NULL);
        # CREATE INDEX "main_app_categories_name_9d1b12d2" ON "main_app_categories" ("name");
        # CREATE INDEX "main_app_categories_name_9d1b12d2_like" ON "main_app_categories" ("name" varchar_pattern_ops);
        # CREATE INDEX "main_app_categories_slug_201a0723_like" ON "main_app_categories" ("slug" varchar_pattern_ops);
        # CREATE INDEX "main_app_shops_name_69b05fd9" ON "main_app_shops" ("name");
        # CREATE INDEX "main_app_shops_name_69b05fd9_like" ON "main_app_shops" ("name" varchar_pattern_ops);
        # ALTER TABLE "main_app_products" ADD CONSTRAINT "main_app_products_cat_id_ac3d1de4_fk_main_app_categories_id" FOREIGN KEY ("cat_id") REFERENCES "main_app_categories" ("id") DEFERRABLE INITIALLY DEFERRED;
        # ALTER TABLE "main_app_products" ADD CONSTRAINT "main_app_products_shop_id_5ffd4812_fk_main_app_shops_id" FOREIGN KEY ("shop_id") REFERENCES "main_app_shops" ("id") DEFERRABLE INITIALLY DEFERRED;
        # CREATE INDEX "main_app_products_name_513522dc" ON "main_app_products" ("name");
        # CREATE INDEX "main_app_products_name_513522dc_like" ON "main_app_products" ("name" varchar_pattern_ops);
        # CREATE INDEX "main_app_products_shop_name_e69f7a18" ON "main_app_products" ("shop_name");
        # CREATE INDEX "main_app_products_shop_name_e69f7a18_like" ON "main_app_products" ("shop_name" varchar_pattern_ops);
        # CREATE INDEX "main_app_products_cat_id_ac3d1de4" ON "main_app_products" ("cat_id");
        # CREATE INDEX "main_app_products_shop_id_5ffd4812" ON "main_app_products" ("shop_id");
        # COMMIT;''' # без вывода команд в консоль)

        sql_migrate_0001 = call_command('sqlmigrate', 'main_app', '0001') #с выводом команд в консоль
        conn = psycopg2.connect(dbname='discount_db', user='postgres',
                                password='228322', host='localhost', port="5432")
        cursor = conn.cursor()

        removed_tables = []
        exceptions = []
        for model in apps.get_models():
            if model.__name__ in ('Shops', 'Categories', 'Products'):
                try:
                    model.objects.all().delete()
                    cursor.execute(f'DROP TABLE IF EXISTS {model._meta.db_table} CASCADE')
                    conn.commit()
                    print(f"Dropped table {model._meta.db_table} from model {model.__name__}")
                except Exception as e:
                    exceptions.append([model._meta.db_table, str(e)])
                    print(e)
                    continue
                removed_tables.append(model._meta.db_table)
        print(f"Removed {len(removed_tables)} tables")
        cursor.execute(sql_migrate_0001)
        conn.close()

        data_dir = join(BASE_DIR, 'main_app\static\main_app\data')
        shops_id = {}
        categories_id = {}

        for shop_id, shop_name in enumerate(listdir(data_dir)):
            shops_id[shop_name] = shop_id + 1
            # Shops.objects.create(name=shop_name)

            for cat_id, dir in enumerate(listdir(join(data_dir, shop_name))):
                if dir not in categories_id:
                    categories_id[dir] = cat_id + 1
                # Categories.objects.create(name=dir)
                onlyfiles = [f for f in listdir(join(data_dir, shop_name, dir)) if isfile(join(data_dir, shop_name, dir, f))]
                # for file_name in onlyfiles:
                #     path_to_file = join(data_dir, dir, file_name)
                #     with open(path_to_file, encoding='utf-8') as file:
                #         src = file.read()
                #
                #     soup = BeautifulSoup(src, 'lxml')
                #     domen_name = 'https://www.dns-shop.ru'
                #
                #     all_products_href = soup.find_all(class_='catalog-product__name')
                #     for item in all_products_href:
                #         name = item.text[:-1]
                #         href = item.get('href')
                #         print(name, href)
                #         # Products.objects.create(
                #         #     name=,
                #         #     price=,
                #         #     shop_id=shop_id[shop_name])